// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: core/src/main/java/com/nightscout/core/model/v2/g4_data.proto
package com.nightscout.core.model.v2;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 * Next tag: 14
 */
public final class G4Data extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<SensorGlucoseValue> DEFAULT_SENSOR_GLUCOSE_VALUES = Collections.emptyList();
  public static final GlucoseUnit DEFAULT_UNITS = GlucoseUnit.MGDL;
  public static final Long DEFAULT_RECEIVER_SYSTEM_TIME_SEC = 0L;
  public static final Float DEFAULT_RECEIVER_BATTERY_PERCENT = 0F;
  public static final Float DEFAULT_UPLOADER_BATTERY_PERCENT = 0F;
  public static final List<ManualMeterEntry> DEFAULT_MANUAL_METER_ENTRIES = Collections.emptyList();
  public static final List<RawSensorReading> DEFAULT_RAW_SENSOR_READINGS = Collections.emptyList();
  public static final List<Calibration> DEFAULT_CALIBRATIONS = Collections.emptyList();
  public static final List<Insertion> DEFAULT_INSERTIONS = Collections.emptyList();
  public static final String DEFAULT_RECEIVER_ID = "";
  public static final String DEFAULT_TRANSMITTER_ID = "";

  /**
   * Glucose records as reported by the G4
   */
  @ProtoField(tag = 1, label = REPEATED, messageType = SensorGlucoseValue.class)
  public final List<SensorGlucoseValue> sensor_glucose_values;

  /**
   * Units reported by the g4, set in the user preferences.
   */
  @ProtoField(tag = 2, type = ENUM)
  public final GlucoseUnit units;

  /**
   * Raw value of the receiver's system time. This is read directly from the receiver, and can be
   * used to calculate 'real' time, by using it as a timestamp from a 'Dexcom epoch'. See
   * com.nightscout.core.dexcom.Utils#receiverTimeToDateTime for more info.
   */
  @ProtoField(tag = 4, type = UINT64)
  public final Long receiver_system_time_sec;

  @ProtoField(tag = 6, type = FLOAT)
  public final Float receiver_battery_percent;

  @ProtoField(tag = 7, type = FLOAT)
  public final Float uploader_battery_percent;

  @ProtoField(tag = 8, label = REPEATED, messageType = ManualMeterEntry.class)
  public final List<ManualMeterEntry> manual_meter_entries;

  @ProtoField(tag = 9, label = REPEATED, messageType = RawSensorReading.class)
  public final List<RawSensorReading> raw_sensor_readings;

  @ProtoField(tag = 10, label = REPEATED, messageType = Calibration.class)
  public final List<Calibration> calibrations;

  @ProtoField(tag = 11, label = REPEATED, messageType = Insertion.class)
  public final List<Insertion> insertions;

  /**
   * The receiver id reported by the dexcom g4. This uniquely identifies the device where this Data object came from.
   */
  @ProtoField(tag = 12, type = STRING)
  public final String receiver_id;

  /**
   * The transmitter id reported as used by the dexcom g4. Should look like '6A14AC'.
   */
  @ProtoField(tag = 13, type = STRING)
  public final String transmitter_id;

  public G4Data(List<SensorGlucoseValue> sensor_glucose_values, GlucoseUnit units, Long receiver_system_time_sec, Float receiver_battery_percent, Float uploader_battery_percent, List<ManualMeterEntry> manual_meter_entries, List<RawSensorReading> raw_sensor_readings, List<Calibration> calibrations, List<Insertion> insertions, String receiver_id, String transmitter_id) {
    this.sensor_glucose_values = immutableCopyOf(sensor_glucose_values);
    this.units = units;
    this.receiver_system_time_sec = receiver_system_time_sec;
    this.receiver_battery_percent = receiver_battery_percent;
    this.uploader_battery_percent = uploader_battery_percent;
    this.manual_meter_entries = immutableCopyOf(manual_meter_entries);
    this.raw_sensor_readings = immutableCopyOf(raw_sensor_readings);
    this.calibrations = immutableCopyOf(calibrations);
    this.insertions = immutableCopyOf(insertions);
    this.receiver_id = receiver_id;
    this.transmitter_id = transmitter_id;
  }

  private G4Data(Builder builder) {
    this(builder.sensor_glucose_values, builder.units, builder.receiver_system_time_sec, builder.receiver_battery_percent, builder.uploader_battery_percent, builder.manual_meter_entries, builder.raw_sensor_readings, builder.calibrations, builder.insertions, builder.receiver_id, builder.transmitter_id);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof G4Data)) return false;
    G4Data o = (G4Data) other;
    return equals(sensor_glucose_values, o.sensor_glucose_values)
        && equals(units, o.units)
        && equals(receiver_system_time_sec, o.receiver_system_time_sec)
        && equals(receiver_battery_percent, o.receiver_battery_percent)
        && equals(uploader_battery_percent, o.uploader_battery_percent)
        && equals(manual_meter_entries, o.manual_meter_entries)
        && equals(raw_sensor_readings, o.raw_sensor_readings)
        && equals(calibrations, o.calibrations)
        && equals(insertions, o.insertions)
        && equals(receiver_id, o.receiver_id)
        && equals(transmitter_id, o.transmitter_id);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = sensor_glucose_values != null ? sensor_glucose_values.hashCode() : 1;
      result = result * 37 + (units != null ? units.hashCode() : 0);
      result = result * 37 + (receiver_system_time_sec != null ? receiver_system_time_sec.hashCode() : 0);
      result = result * 37 + (receiver_battery_percent != null ? receiver_battery_percent.hashCode() : 0);
      result = result * 37 + (uploader_battery_percent != null ? uploader_battery_percent.hashCode() : 0);
      result = result * 37 + (manual_meter_entries != null ? manual_meter_entries.hashCode() : 1);
      result = result * 37 + (raw_sensor_readings != null ? raw_sensor_readings.hashCode() : 1);
      result = result * 37 + (calibrations != null ? calibrations.hashCode() : 1);
      result = result * 37 + (insertions != null ? insertions.hashCode() : 1);
      result = result * 37 + (receiver_id != null ? receiver_id.hashCode() : 0);
      result = result * 37 + (transmitter_id != null ? transmitter_id.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<G4Data> {

    public List<SensorGlucoseValue> sensor_glucose_values;
    public GlucoseUnit units;
    public Long receiver_system_time_sec;
    public Float receiver_battery_percent;
    public Float uploader_battery_percent;
    public List<ManualMeterEntry> manual_meter_entries;
    public List<RawSensorReading> raw_sensor_readings;
    public List<Calibration> calibrations;
    public List<Insertion> insertions;
    public String receiver_id;
    public String transmitter_id;

    public Builder() {
    }

    public Builder(G4Data message) {
      super(message);
      if (message == null) return;
      this.sensor_glucose_values = copyOf(message.sensor_glucose_values);
      this.units = message.units;
      this.receiver_system_time_sec = message.receiver_system_time_sec;
      this.receiver_battery_percent = message.receiver_battery_percent;
      this.uploader_battery_percent = message.uploader_battery_percent;
      this.manual_meter_entries = copyOf(message.manual_meter_entries);
      this.raw_sensor_readings = copyOf(message.raw_sensor_readings);
      this.calibrations = copyOf(message.calibrations);
      this.insertions = copyOf(message.insertions);
      this.receiver_id = message.receiver_id;
      this.transmitter_id = message.transmitter_id;
    }

    /**
     * Glucose records as reported by the G4
     */
    public Builder sensor_glucose_values(List<SensorGlucoseValue> sensor_glucose_values) {
      this.sensor_glucose_values = checkForNulls(sensor_glucose_values);
      return this;
    }

    /**
     * Units reported by the g4, set in the user preferences.
     */
    public Builder units(GlucoseUnit units) {
      this.units = units;
      return this;
    }

    /**
     * Raw value of the receiver's system time. This is read directly from the receiver, and can be
     * used to calculate 'real' time, by using it as a timestamp from a 'Dexcom epoch'. See
     * com.nightscout.core.dexcom.Utils#receiverTimeToDateTime for more info.
     */
    public Builder receiver_system_time_sec(Long receiver_system_time_sec) {
      this.receiver_system_time_sec = receiver_system_time_sec;
      return this;
    }

    public Builder receiver_battery_percent(Float receiver_battery_percent) {
      this.receiver_battery_percent = receiver_battery_percent;
      return this;
    }

    public Builder uploader_battery_percent(Float uploader_battery_percent) {
      this.uploader_battery_percent = uploader_battery_percent;
      return this;
    }

    public Builder manual_meter_entries(List<ManualMeterEntry> manual_meter_entries) {
      this.manual_meter_entries = checkForNulls(manual_meter_entries);
      return this;
    }

    public Builder raw_sensor_readings(List<RawSensorReading> raw_sensor_readings) {
      this.raw_sensor_readings = checkForNulls(raw_sensor_readings);
      return this;
    }

    public Builder calibrations(List<Calibration> calibrations) {
      this.calibrations = checkForNulls(calibrations);
      return this;
    }

    public Builder insertions(List<Insertion> insertions) {
      this.insertions = checkForNulls(insertions);
      return this;
    }

    /**
     * The receiver id reported by the dexcom g4. This uniquely identifies the device where this Data object came from.
     */
    public Builder receiver_id(String receiver_id) {
      this.receiver_id = receiver_id;
      return this;
    }

    /**
     * The transmitter id reported as used by the dexcom g4. Should look like '6A14AC'.
     */
    public Builder transmitter_id(String transmitter_id) {
      this.transmitter_id = transmitter_id;
      return this;
    }

    @Override
    public G4Data build() {
      return new G4Data(this);
    }
  }
}
