package nightscout.model.v2;

import "units.proto";

option java_package = "com.nightscout.core.model.v2";
option java_outer_classname = "G4Protos";

// Next tag: 14
message G4Data {
    // Glucose records as reported by the G4
    repeated SensorGlucoseValue sensor_glucose_values = 1;

    // Units reported by the g4, set in the user preferences.
    optional GlucoseUnit units = 2;

    // Raw value of the receiver's system time. This is read directly from the receiver, and can be
    // used to calculate 'real' time, by using it as a timestamp from a 'Dexcom epoch'. See
    // com.nightscout.core.dexcom.Utils#receiverTimeToDateTime for more info.
    optional uint64 receiver_system_time_sec = 4;

    optional float receiver_battery_percent = 6;

    optional float uploader_battery_percent = 7;

    repeated ManualMeterEntry manual_meter_entries = 8;

    repeated RawSensorReading raw_sensor_readings = 9;

    repeated Calibration calibrations = 10;

    repeated Insertion insertions = 11;

    // The receiver id reported by the dexcom g4. This uniquely identifies the device where this Data object came from.
    optional string receiver_id = 12;
    // The transmitter id reported as used by the dexcom g4. Should look like '6A14AC'.
    optional string transmitter_id = 13;
}

// Next tag: 10
enum Trend {
    TREND_NONE = 0;
    DOUBLE_UP = 1; // More than 3 mg/dL per minute
    SINGLE_UP = 2; // +2 to +3 mg/dL per minute
    FORTY_FIVE_UP = 3; // +1 to +2 mg/dL per minute
    FLAT = 4; // +/- 1 mg/dL per minute
    FORTY_FIVE_DOWN = 5; // -1 to -2 mg/dL per minute
    SINGLE_DOWN = 6; // -2 to -3 mg/dL per minute
    DOUBLE_DOWN = 7; // more than -3 mg/dL per minute
    NOT_COMPUTABLE = 8;
    RATE_OUT_OF_RANGE = 9;
}

// Next tag: 7
enum Noise {
    NOISE_NONE = 0;
    CLEAN = 1;
    LIGHT = 2;
    MEDIUM = 3;
    HEAVY = 4;
    NOT_COMPUTED = 5;
    MAX = 6;
}

// Next tag: 2
enum ReceiverStatus {
    RECEIVER_CONNECTED = 0; // The receiver is connected to the uploader
    RECEIVER_DISCONNECTED = 1; // The receiver is not connected to the uploader
}

// Next tag: 3
message G4Timestamp {
    // The internal clock of the receiver
    optional uint64 system_time_sec = 1;
    // The user configured time displayed on the receiver
    optional uint64 display_time_sec = 2;
}

// Next tag: 5
message SensorGlucoseValue {
    // Value calculated by the receiver as the blood sugar at the given timestamp.
    optional uint32 glucose_mgdl = 1;
    optional Trend trend = 2;
    // How noisy the g4 thinks this entry is
    optional Noise noise = 3;
    optional G4Timestamp timestamp = 4;
}

// Next tag: 4
message ManualMeterEntry {
    required uint32 entered_blood_glucose_mgdl = 1;
    // TODO(trhodeos): do we need this?
    optional uint32 meter_time = 2;
    optional G4Timestamp timestamp = 3;
}

// Next tag: 6
message RawSensorReading {
    required uint64 filtered = 1;
    optional uint64 unfiltered = 2;
    optional uint32 rssi = 3;
    optional G4Timestamp timestamp = 4;
}

// Next tag: 3
message Insertion {
    // Next tag: 11
    enum State {
        INSERTION_NONE = 0;
        REMOVED = 1;
        EXPIRED = 2;
        RESIDUAL_DEVIATION = 3;
        COUNTS_DEVIATION = 4;
        SECOND_SESSION = 5;
        OFF_TIME_LOSS = 6;
        STARTED = 7;
        BAD_TRANSMITTER = 8;
        MANUFACTURING_MODE = 9;
        MAX_VALUE = 10;
    }

    required State state = 1;
    optional G4Timestamp timestamp = 2;
}

// Next tag: 6
message Calibration {
    required double slope = 1;
    optional double intercept = 2;
    optional double scale = 3;
    optional double decay = 4;
    optional G4Timestamp timestamp = 5;
}

// Next tag: 3
message ReceiverState {
    required uint64 timestamp_ms = 1;
    repeated ReceiverStatus event = 2;
}